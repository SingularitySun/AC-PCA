#cluster1 <- 1:2
B <- matrix(0, b, 1)
B[c(1, 5, 9),1] <- runif(3)
#B[,2] <- 1 - B[,1]
Xs[[i]] <- W %*% h + alpha * B %*% s[[i]] + epsilon
}
X <- Reduce(rbind, Xs)
X <- sweep(X, 2, colMeans(X))
## Make Y
Y <- c()
for (k in 1:b){
for (i in 1:(n-1)){
for (j in (i+1):n){
tmp <- rep(0, n*b)
tmp[(i-1)*b+k] <- 1
tmp[(j-1)*b+k] <- -1
Y <- cbind(Y, as.matrix(tmp))
}
}
}
lambda <- 2.5
Z <- crossprod(X) - lambda* t(X)%*% Y %*% t(Y) %*% X
eigenvectors <- eigen(Z, symmetric = TRUE)$vectors
ac_pca <- -X%*%eigenvectors
par(mfrow=c(1,3))
plot(prcomp(W)$x, main = "True Pattern")
plot(prcomp(X)$x[,1:2], main = "PCA", col = rep(1:5, each=b))
plot(ac_pca[,1:2], col = rep(1:5, each=b), main="AC-PCA")
library(sva, quietly = T, warn.conflicts=F)
individual <- factor(rep(1:n, each = b))
fit <- ComBat(t(X), individual)
combat_pca <- -prcomp(t(fit))$x
pheno <- data.frame(label=rep(1:b, n))
trainMod = model.matrix(~as.factor(label), data=pheno)
trainMod0 = model.matrix(~1,data=pheno)
trainSv = sva(t(X),trainMod,trainMod0)
fsvaobj = fsva(t(X),trainMod,trainSv,t(X))
fsva_data <- fsvaobj$db
pca_sva <- prcomp(t(fsva_data), center=T)$x
par(mfrow=c(1,2))
plot( combat_pca[,1:2], col = rep(1:5, each=b), main = "ComBat")
plot( pca_sva[,1:2], col = rep(1:5, each=b), main = "SVA")
set.seed(10)
n <- 5
b <- 10
p <- 400
## Construct W
W <- matrix(NA, b, 2)
W[,1] <- scale(1:b)
Sigma <- matrix(NA, b, b)
for(i in 1:b){
for(j in 1:b){
Sigma[i,j] <- exp( - (W[i,1] - W[j,1])^2 / 4)
}
}
W[,2] <- MASS::mvrnorm(1, rep(0,b), 0.25*Sigma)
## Constrcut h
h <- matrix(rnorm(2*p), 2, p)
## Construc the data X
alpha <- 2.5
Xs <- vector("list", n)
s <- vector("list", n)
for(i in 1:n){
epsilon <- matrix(rnorm(n*p, 0, 0.25), b, p)
#s[[i]] <- matrix( rnorm(2*p), 2, p)
s[[i]] <- matrix( rnorm(1*p), 1, p)
#cluster1 <- sample(b, round(0.2*b))
#cluster1 <- 1:2
B <- matrix(0, b, 1)
B[c(1, 5, 9),1] <- runif(3)
#B[,2] <- 1 - B[,1]
Xs[[i]] <- W %*% h + alpha * B %*% s[[i]] + epsilon
}
X <- Reduce(rbind, Xs)
X <- sweep(X, 2, colMeans(X))
## Make Y
Y <- c()
for (k in 1:b){
for (i in 1:(n-1)){
for (j in (i+1):n){
tmp <- rep(0, n*b)
tmp[(i-1)*b+k] <- 1
tmp[(j-1)*b+k] <- -1
Y <- cbind(Y, as.matrix(tmp))
}
}
}
lambda <- 2.5
Z <- crossprod(X) - lambda* t(X)%*% Y %*% t(Y) %*% X
eigenvectors <- eigen(Z, symmetric = TRUE)$vectors
ac_pca <- -X%*%eigenvectors
par(mfrow=c(1,3))
plot(prcomp(W)$x, main = "True Pattern")
plot(prcomp(X)$x[,1:2], main = "PCA", col = rep(1:5, each=b))
plot(ac_pca[,1:2], col = rep(1:5, each=b), main="AC-PCA")
library(sva, quietly = T, warn.conflicts=F)
individual <- factor(rep(1:n, each = b))
fit <- ComBat(t(X), individual)
combat_pca <- -prcomp(t(fit))$x
pheno <- data.frame(label=rep(1:b, n))
trainMod = model.matrix(~as.factor(label), data=pheno)
trainMod0 = model.matrix(~1,data=pheno)
trainSv = sva(t(X),trainMod,trainMod0)
fsvaobj = fsva(t(X),trainMod,trainSv,t(X))
fsva_data <- fsvaobj$db
pca_sva <- prcomp(t(fsva_data), center=T)$x
par(mfrow=c(1,2))
plot( combat_pca[,1:2], col = rep(1:5, each=b), main = "ComBat")
plot( pca_sva[,1:2], col = rep(1:5, each=b), main = "SVA")
set.seed(10)
n <- 5
b <- 10
p <- 400
## Construct W
W <- matrix(NA, b, 2)
W[,1] <- scale(1:b)
Sigma <- matrix(NA, b, b)
for(i in 1:b){
for(j in 1:b){
Sigma[i,j] <- exp( - (W[i,1] - W[j,1])^2 / 4)
}
}
W[,2] <- MASS::mvrnorm(1, rep(0,b), 0.25*Sigma)
## Constrcut h
h <- matrix(rnorm(2*p), 2, p)
## Construc the data X
alpha <- 2.5
Xs <- vector("list", n)
s <- vector("list", n)
for(i in 1:n){
epsilon <- matrix(rnorm(n*p, 0, 0.25), b, p)
#s[[i]] <- matrix( rnorm(2*p), 2, p)
s[[i]] <- matrix( rnorm(1*p), 1, p)
#cluster1 <- sample(b, round(0.2*b))
#cluster1 <- 1:2
B <- matrix(0, b, 1)
B[c(1, 5),1] <- runif(2)
#B[,2] <- 1 - B[,1]
Xs[[i]] <- W %*% h + alpha * B %*% s[[i]] + epsilon
}
X <- Reduce(rbind, Xs)
X <- sweep(X, 2, colMeans(X))
## Make Y
Y <- c()
for (k in 1:b){
for (i in 1:(n-1)){
for (j in (i+1):n){
tmp <- rep(0, n*b)
tmp[(i-1)*b+k] <- 1
tmp[(j-1)*b+k] <- -1
Y <- cbind(Y, as.matrix(tmp))
}
}
}
lambda <- 2.5
Z <- crossprod(X) - lambda* t(X)%*% Y %*% t(Y) %*% X
eigenvectors <- eigen(Z, symmetric = TRUE)$vectors
ac_pca <- -X%*%eigenvectors
par(mfrow=c(1,3))
plot(prcomp(W)$x, main = "True Pattern")
plot(prcomp(X)$x[,1:2], main = "PCA", col = rep(1:5, each=b))
plot(ac_pca[,1:2], col = rep(1:5, each=b), main="AC-PCA")
library(sva, quietly = T, warn.conflicts=F)
individual <- factor(rep(1:n, each = b))
fit <- ComBat(t(X), individual)
combat_pca <- -prcomp(t(fit))$x
pheno <- data.frame(label=rep(1:b, n))
trainMod = model.matrix(~as.factor(label), data=pheno)
trainMod0 = model.matrix(~1,data=pheno)
trainSv = sva(t(X),trainMod,trainMod0)
fsvaobj = fsva(t(X),trainMod,trainSv,t(X))
fsva_data <- fsvaobj$db
pca_sva <- prcomp(t(fsva_data), center=T)$x
par(mfrow=c(1,2))
plot( combat_pca[,1:2], col = rep(1:5, each=b), main = "ComBat")
plot( pca_sva[,1:2], col = rep(1:5, each=b), main = "SVA")
set.seed(10)
n <- 5
b <- 10
p <- 400
## Construct W
W <- matrix(NA, b, 2)
W[,1] <- scale(1:b)
Sigma <- matrix(NA, b, b)
for(i in 1:b){
for(j in 1:b){
Sigma[i,j] <- exp( - (W[i,1] - W[j,1])^2 / 4)
}
}
W[,2] <- MASS::mvrnorm(1, rep(0,b), 0.25*Sigma)
## Constrcut h
h <- matrix(rnorm(2*p), 2, p)
## Construc the data X
alpha <- 2.5
Xs <- vector("list", n)
s <- vector("list", n)
for(i in 1:n){
epsilon <- matrix(rnorm(n*p, 0, 0.25), b, p)
#s[[i]] <- matrix( rnorm(2*p), 2, p)
s[[i]] <- matrix( rnorm(1*p), 1, p)
#cluster1 <- sample(b, round(0.2*b))
#cluster1 <- 1:2
B <- matrix(0, b, 1)
B[c(1, 5),1] <- 2*runif(2)
#B[,2] <- 1 - B[,1]
Xs[[i]] <- W %*% h + alpha * B %*% s[[i]] + epsilon
}
X <- Reduce(rbind, Xs)
X <- sweep(X, 2, colMeans(X))
## Make Y
Y <- c()
for (k in 1:b){
for (i in 1:(n-1)){
for (j in (i+1):n){
tmp <- rep(0, n*b)
tmp[(i-1)*b+k] <- 1
tmp[(j-1)*b+k] <- -1
Y <- cbind(Y, as.matrix(tmp))
}
}
}
lambda <- 2.5
Z <- crossprod(X) - lambda* t(X)%*% Y %*% t(Y) %*% X
eigenvectors <- eigen(Z, symmetric = TRUE)$vectors
ac_pca <- -X%*%eigenvectors
par(mfrow=c(1,3))
plot(prcomp(W)$x, main = "True Pattern")
plot(prcomp(X)$x[,1:2], main = "PCA", col = rep(1:5, each=b))
plot(ac_pca[,1:2], col = rep(1:5, each=b), main="AC-PCA")
library(sva, quietly = T, warn.conflicts=F)
individual <- factor(rep(1:n, each = b))
fit <- ComBat(t(X), individual)
combat_pca <- -prcomp(t(fit))$x
pheno <- data.frame(label=rep(1:b, n))
trainMod = model.matrix(~as.factor(label), data=pheno)
trainMod0 = model.matrix(~1,data=pheno)
trainSv = sva(t(X),trainMod,trainMod0)
fsvaobj = fsva(t(X),trainMod,trainSv,t(X))
fsva_data <- fsvaobj$db
pca_sva <- prcomp(t(fsva_data), center=T)$x
par(mfrow=c(1,2))
plot( combat_pca[,1:2], col = rep(1:5, each=b), main = "ComBat")
plot( pca_sva[,1:2], col = rep(1:5, each=b), main = "SVA")
runif(2)
runif(2)
period2_data <- read.csv("~/Documents/human_brain_exp/period2_data.csv")
View(period2_data)
period2_data <- period2_data[,4:63]
labs <- colnames(period2_data)
p2lf <- c()
p2id <- c()
p2rg <- c()
for (lab in labs){
tmp <- strsplit(lab, "[.]")[[1]]
p2lf <- c(p2lf, tmp[3])
p2id <- c(p2id, tmp[1])
p2rg <- c(p2rg, tmp[2])
}
p2id[p2id=="X112"] <- "HSB112"
p2id[p2id=="X148"] <- "HSB148"
###filter out the brains unused
dtmp112 <- period2_data[p2id=="HSB112" & p2lf=="R"]
rg112 <- p2rg[p2id=="HSB112" & p2lf=="R"]
dtmp148 <- period2_data[p2id=="HSB148" & p2lf=="L"]
rg148 <- p2rg[p2id=="HSB148" & p2lf=="L"]
load("/Users/zhixianglin/Dropbox/human_brain_exp/data_all.rda")
load("/Users/zhixianglin/Dropbox/human_brain_exp/brain_regions.rda")
load("/Users/zhixianglin/Dropbox/human_brain_exp/time_p.rda")
rg <- c()
tp <- c()
dataA <- c()
for (i in 1:16){
dataA <- cbind(dataA, data_all[[i]])
tp <- c(tp, time_p[[i]])
rg <- c(rg, rep(brain_regions[i], length(time_p[[i]])))
}
all_infor <- colnames(dataA)
sample_id <- c()
leftright <- c()
for (i in all_infor){
tmp <- strsplit(i, "_")[[1]]
sample_id <- c(sample_id, tmp[1])
leftright <- c(leftright, tmp[3])
}
wd_ying <- read.csv("~/Documents/brainspan/window_5-9-2015_ying.csv")
dataAf <- c()
rgf <- c()
sample_idf <- c()
for (t in 1:8){
print(t)
sids <- wd_ying[which(wd_ying[,3]==t),2]
lfs <- wd_ying[which(wd_ying[,3]==t),4]
for (isid in 1:length(sids)){
sid <- sids[isid]
if (sid=="HSB127"){
##HIP AMY R, other L
for (br in brain_regions){
if (br=="HIP" | br=="AMY"){
dataAf <- cbind(dataAf, dataA[,sample_id==sid & leftright=="R" & rg==br])
rgf <- c(rgf, br)
sample_idf <- c(sample_idf, as.vector(sid))
} else {
dataAf <- cbind(dataAf, dataA[,sample_id==sid & leftright=="L" & rg==br])
rgf <- c(rgf, br)
sample_idf <- c(sample_idf, as.vector(sid))
}
}
} else {
lf <- as.character(lfs[isid])
rgtmp <- rg[sample_id==sid & leftright==lf]
rgf <- c(rgf, rgtmp)
sample_idf <- c(sample_idf, rep(as.vector(sid), length(rgtmp)))
dataAf <- cbind(dataAf, dataA[,sample_id==sid & leftright==lf])
}
}
}
dataAf <- dataAf[1:17565,]
dataAf <- cbind(dataAf, dtmp112, dtmp148)
rgf <- c(rgf, rg112, rg148)
sample_idf <- c(sample_idf, rep("HSB112", length(rg112)), rep("HSB148", length(rg148)))
###only retain the highly expressed genes
med <- apply(dataAf, 1, median)
dataExp <- dataAf[med>=5.5,]
rg <- rgf
sample_id <- sample_idf
rg[rg=="URL"] <- "CBC"
rg[rg=="DTH"] <- "MD"
##HSB112, 148, summarize MGE, LGE, CGE to STR, summarize ncx by taking median
dataNcxS <- c()
rgNcxS <- c()
sidNcxS <- c()
for (id in unique(sample_id)){
dtmp <- dataExp[, sample_id==id]
rgtmp <- rg[sample_id==id]
if (id=="HSB112" || id=="HSB148"){
labstr <- (rgtmp=="MGE"| rgtmp=="LGE" | rgtmp=="CGE") + 0
dataNcxS <- cbind(dataNcxS, apply(dtmp[,which(labstr==1)], 1, median))
rgNcxS <- c(rgNcxS, "STR")
sidNcxS <- c(sidNcxS, id)
dtmp <- dtmp[,-which(labstr==1)]
rgtmp <- rgtmp[-which(labstr==1)]
##neocortex
labncx <- (rgtmp!="AMY"& rgtmp!="HIP" & rgtmp!="MD" & rgtmp!="CBC") + 0
dataNcxS <- cbind(dataNcxS, apply(dtmp[,which(labstr==1)], 1, median))
rgNcxS <- c(rgNcxS, "NCX")
sidNcxS <- c(sidNcxS, id)
dtmp <- dtmp[,-which(labncx==1)]
rgtmp <- rgtmp[-which(labncx==1)]
##other non-neocortex
dataNcxS <- cbind(dataNcxS, dtmp)
rgNcxS <- c(rgNcxS, rgtmp)
sidNcxS <- c(sidNcxS, rep(id, length(rgtmp)))
} else{
##neocortex
labncx <- (rgtmp!="AMY"& rgtmp!="HIP" & rgtmp!="MD" & rgtmp!="CBC" & rgtmp!="STR") + 0
dataNcxS <- cbind(dataNcxS, apply(dtmp[,which(labncx==1)], 1, median))
rgNcxS <- c(rgNcxS, "NCX")
sidNcxS <- c(sidNcxS, id)
dtmp <- dtmp[,-which(labncx==1)]
rgtmp <- rgtmp[-which(labncx==1)]
##other non-neocortex
dataNcxS <- cbind(dataNcxS, dtmp)
rgNcxS <- c(rgNcxS, rgtmp)
sidNcxS <- c(sidNcxS, rep(id, length(rgtmp)))
}
}
lambda <- 1
brsubset <- unique(rgNcxS)
t=1
sids <- wd_ying[which(wd_ying[,3]==t),2]
datat <- array(dim=c(length(sids), length(brsubset), dim(dataNcxS)[1]))
for (isid in 1:length(sids)){
sid <- sids[isid]
rgtmp <- rgNcxS[sidNcxS==sid]
datatmp <- dataNcxS[,sidNcxS==sid]
for (ib in 1:length(brsubset)){
b <- brsubset[ib]
if (sum(rgtmp==b)==0){
} else {
datat[isid,ib,] <- datatmp[,rgtmp==b]
}
}
}
datatc <- center_indiv(datat)
source("/Users/zhixianglin/Dropbox/brain_gradient/code/function_aipca.R")
datatc <- center_indiv(datat)
dim(datatc)
t=0
sids <- wd_ying[which(wd_ying[,3]==t),2]
datat <- array(dim=c(length(sids), length(brsubset), dim(dataNcxS)[1]))
for (isid in 1:length(sids)){
sid <- sids[isid]
rgtmp <- rgNcxS[sidNcxS==sid]
datatmp <- dataNcxS[,sidNcxS==sid]
for (ib in 1:length(brsubset)){
b <- brsubset[ib]
if (sum(rgtmp==b)==0){
} else {
datat[isid,ib,] <- datatmp[,rgtmp==b]
}
}
}
datatc <- center_indiv(datat)
dim(datatc)
lambda <- 1
brsubset <- unique(rgNcxS)
pc1vA <- c()
pc2vA <- c()
totvarA <- c()
lambda <- 1
brsubset <- unique(rgNcxS)
pc1vA <- c()
pc2vA <- c()
totvarA <- c()
for (t in 0:8){
print(t)
sids <- wd_ying[which(wd_ying[,3]==t),2]
datat <- array(dim=c(length(sids), length(brsubset), dim(dataNcxS)[1]))
for (isid in 1:length(sids)){
sid <- sids[isid]
rgtmp <- rgNcxS[sidNcxS==sid]
datatmp <- dataNcxS[,sidNcxS==sid]
for (ib in 1:length(brsubset)){
b <- brsubset[ib]
if (sum(rgtmp==b)==0){
} else {
datat[isid,ib,] <- datatmp[,rgtmp==b]
}
}
}
datatc <- center_indiv(datat)
nid <- dim(datatc)[1]
test <- calQmatrix(datatc, lambda=lambda*(nid-1)/2)
wtest <- eigs_sym(test, 2,which = "LA")$vectors[,1:2]
pc1v <- 0
pc2v <- 0
for (i in 1:nid){
corI <- datatc[i,,]%*%wtest
pc1v <- pc1v + var(corI[,1], na.rm=T)
pc2v <- pc2v + var(corI[,2], na.rm=T)
}
calvar <- function(matrix){
sum(apply(matrix, 2, var, na.rm = T),na.rm = T)
}
totvar <- sum(apply(datatc, 1, calvar))
pc1vA <- c(pc1vA, pc1v)
pc2vA <- c(pc2vA, pc2v)
totvarA <- c(totvarA, totvar)
print(pc1vA/totvarA)
}
library("rARPACK")
source("/Users/zhixianglin/Dropbox/brain_gradient/code/function_aipca.R")
lambda <- 1
brsubset <- unique(rgNcxS)
pc1vA <- c()
pc2vA <- c()
totvarA <- c()
for (t in 0:8){
print(t)
sids <- wd_ying[which(wd_ying[,3]==t),2]
datat <- array(dim=c(length(sids), length(brsubset), dim(dataNcxS)[1]))
for (isid in 1:length(sids)){
sid <- sids[isid]
rgtmp <- rgNcxS[sidNcxS==sid]
datatmp <- dataNcxS[,sidNcxS==sid]
for (ib in 1:length(brsubset)){
b <- brsubset[ib]
if (sum(rgtmp==b)==0){
} else {
datat[isid,ib,] <- datatmp[,rgtmp==b]
}
}
}
datatc <- center_indiv(datat)
nid <- dim(datatc)[1]
test <- calQmatrix(datatc, lambda=lambda*(nid-1)/2)
wtest <- eigs_sym(test, 2,which = "LA")$vectors[,1:2]
pc1v <- 0
pc2v <- 0
for (i in 1:nid){
corI <- datatc[i,,]%*%wtest
pc1v <- pc1v + var(corI[,1], na.rm=T)
pc2v <- pc2v + var(corI[,2], na.rm=T)
}
calvar <- function(matrix){
sum(apply(matrix, 2, var, na.rm = T),na.rm = T)
}
totvar <- sum(apply(datatc, 1, calvar))
pc1vA <- c(pc1vA, pc1v)
pc2vA <- c(pc2vA, pc2v)
totvarA <- c(totvarA, totvar)
print(pc1vA/totvarA)
}
filen <- paste("/Users/zhixianglin/Documents/brainspan/for_Ying_5_21_2016/Array_interregional_variance_all_5_21_2016.csv",sep="")
cornew <- cbind(0:8,totvarA, pc1vA, pc2vA)
colnames(cornew) <- c("Window", "Total","PC1", "PC2")
write.csv(cornew, file=filen, row.names=F)
gc()
rm()
gc()
gc()
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
acPCAcv
acSPCcv
library(devtools)
library(roxygen2)
setwd("/Users/zhixianglin/AC-PCA/R_package/acPCA/")
document()
setwd("/Users/zhixianglin/AC-PCA/R_package/")
install("acPCA")
detach("package:acPCA", unload=TRUE)
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
