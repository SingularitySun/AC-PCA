resultcv_spc1_coarse <- acSPCcv( X=X, Y=Y, c2s=c2s, v_ini=v_ini,
kernel="linear", quiet=T, fold=10)
set.seed(10)
data(data_brain_w2)
X <- data_brain_w2$X ###the data matrix
Y <- data_brain_w2$Y
result1cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 20, 0.1), anov=T, kernel = "linear")
result1 <- acPCA(X=X, Y=Y, lambda=result1cv$best_lambda, kernel="linear", nPC=2)
v_ini <- as.matrix(result1$v[,1])
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
c2s <- seq(1, 0, -0.1)*sum(abs(v_ini))
resultcv_spc1_coarse <- acSPCcv( X=X, Y=Y, c2s=c2s, v_ini=v_ini,
kernel="linear", quiet=T, fold=10)
c2s <- seq(0.9, 0.7, -0.02)*sum(abs(v_ini))
resultcv_spc1_fine <- acSPCcv( X=X, Y=Y, c2s=c2s, v_ini=v_ini,
kernel="linear", quiet=T, fold=10)
result_spc1 <- acSPC( X=X, Y=Y, c2=resultcv_spc1_fine$best_c2,
v_ini=v_ini, kernel="linear")
v1 <- result_spc1$v
sum(v1!=0)
v_substract <- as.matrix(result1$v[,1])
v_ini <- as.matrix(result1$v[,2])
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
c2s <- seq(1, 0, -0.1)*sum(abs(v_ini))
resultcv_spc2_coarse <- acSPCcv(X=X, Y=Y, c2s=c2s, v_ini=v_ini,
v_substract=v_substract, kernel="linear",
quiet=T, fold=10)
c2s <- seq(0.5, 0.3, -0.02)*sum(abs(v_ini))
resultcv_spc2_fine <- acSPCcv(X=X, Y=Y, c2s=c2s, v_ini=v_ini,
v_substract=v_substract, kernel="linear",
quiet=T, fold=10)
resultcv_spc2_coarse
c2s <- seq(0.5, 0.2, -0.02)*sum(abs(v_ini))
resultcv_spc2_fine <- acSPCcv(X=X, Y=Y, c2s=c2s, v_ini=v_ini,
v_substract=v_substract, kernel="linear",
quiet=T, fold=10)
result_spc2 <- acSPC(X=X, Y=Y, c2=resultcv_spc2_fine$best_c2,
v_ini=v_ini, v_substract=v_substract, kernel="linear")
v2 <- result_spc2$v
sum(v2!=0)
X <- data_brain_w5$X;
table(data_brain_w5$hemispheres) ###1: left hemisphere, 3: right hemisphere
load("~/AC-PCA/R_package/acPCA/data/data_brain_w5.rda")
X <- data_brain_w5$X;
table(data_brain_w5$hemispheres) ###1: left hemisphere, 3: right hemisphere
pca <- prcomp(X, center=T) ###regular PCA
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="PCA, window 5, brain data")
text(pca$x[,1], pca$x[,2], labels = data_brain_w5$regions,
col=data_brain_w5$donor_labs, font=data_brain_w5$hemispheres)
Y <- data_brain_w5$Y
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 20, 0.1), anov=T, kernel = "linear", quiet=T)
result_cv$best_lambda
result1 <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda, kernel="linear", nPC=2)
Xv1 <- result1$Xv
plot(Xv1[,1], Xv1[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("AC-PCA, window 5, lambda=", result_cv$best_lambda, sep="") )
text(Xv1[,1], Xv1[,2], labels = data_brain_w5$regions,
col=data_brain_w5$donor_labs, font=data_brain_w5$hemispheres)
@
result2 <- acPCA(X=X, Y=Y, lambda=5, kernel="linear", nPC=2)
Xv2 <- result2$Xv
plot(Xv2[,1], Xv2[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="AC-PCA, window 5, lambda=5")
text(Xv2[,1], Xv2[,2], labels = data_brain_w5$regions,
col=data_brain_w5$donor_labs, font=data_brain_w5$hemispheres)
load("~/AC-PCA/R_package/acPCA/data/data_example1.rda")
names(data_example1)
data_example1$Y
data_example1$lab
data_example1$group
data_example1$group ### the group labels
X <- data_example1$X ### the data matrix
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example1$lab, col=data_example1$colors+1)
plot(data_example1$true_pattern[1,], data_example1$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example1$true_pattern[1,])-0.3,
max(data_example1$true_pattern[1,])+0.3) )
text(data_example1$true_pattern[1,], data_example1$true_pattern[2,], labels = 1:10)
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example1$lab, col=data_example1$group+1)
plot(data_example1$true_pattern[1,], data_example1$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example1$true_pattern[1,])-0.3,
max(data_example1$true_pattern[1,])+0.3) )
text(data_example1$true_pattern[1,], data_example1$true_pattern[2,], labels = 1:10)
Y <- data_example1$Y ### the confounder matrix
Y
par(mfrow=c(1,1))
### first tune lambda
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
###run with the best lambda
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda, kernel="linear", nPC=2)
###the signs of the PCs are meaningless
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
type="n", main="AC-PCA")
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$colors+1)
par(mfrow=c(1,1))
### first tune lambda
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
###run with the best lambda
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda, kernel="linear", nPC=2)
###the signs of the PCs are meaningless
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
type="n", main="AC-PCA")
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
plot(result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
type="n", main="AC-PCA")
text(result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
result_cv
acPCAtuneLambda
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "gaussian",
bandwidth=0.2, quiet=T)
result_cv
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=0.2, nPC=2)
plot(-result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Gaussian kernel, h=0.2")
text(-result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$colors+1)
text(-result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
mean(abs(Y))=0.33
mean(abs(Y))
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "gaussian",
bandwidth=0.5, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=0.2, nPC=2)
###the signs of the PCs are meaningless
plot(-result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Gaussian kernel, h=0.2")
text(-result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=0.5, nPC=2)
###the signs of the PCs are meaningless
plot(-result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Gaussian kernel, h=0.2")
text(-result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
bandwidth <- 0.5
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "gaussian",
bandwidth=bandwidth, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=bandwidth, nPC=2)
###the signs of the PCs are meaningless
plot(result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Gaussian kernel, h=0.2")
text(result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
par(mfrow=c(3,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
hs <- c(0.01, 0.1, 1, 2, 5, 10)
for (h in hs){
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "gaussian",
bandwidth=h, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=h, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", h, sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
}
par(mfrow=c(3,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
hs <- c(0.01, 0.1, 1, 2, 10, 20)
for (h in hs){
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "gaussian",
bandwidth=h, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=h, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", h, sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
}
load("~/AC-PCA/R_package/acPCA/data/data_example3.rda")
names(data_example3)
data_example3$Y
data(data_example2)
data_example2 <- data_example3
X <- data_example2$X ###the data matrix
Y <- data_example2$Y ###the confounder matrix
Y
pca <- prcomp(X, center=T) ###regular PCA
dim(Y)
mean(Y)
Y <- Y - mean(Y)
Y
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(2,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example2$lab)
plot(data_example2$true_pattern[1,], data_example2$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example2$true_pattern[1,])-0.3,
max(data_example2$true_pattern[1,])+0.3) )
text(data_example2$true_pattern[1,], data_example2$true_pattern[2,],
labels = data_example2$lab)
plot(data_example2$confound_pattern[1,], data_example2$confound_pattern[2,],
xlab="", ylab="", col="black", type="n", main="Confounding pattern",
xlim=c(min(data_example2$confound_pattern[1,])-0.3,
max(data_example2$confound_pattern[1,])+0.3) )
text(data_example2$confound_pattern[1,], data_example2$confound_pattern[2,], labels =
paste(data_example2$lab, '(',data_example2$Y, ')', sep="") )
@
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
###run with the best lambda
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
mean(abs(Y))
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "linear", bandwidth=mean(abs(Y)), quiet=T)
###run with the best lambda
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=mean(abs(Y)), quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel = "gaussian", bandwidth=mean(abs(Y)), nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=1, quiet=T)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=1, quiet=T)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=2, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel = "gaussian", bandwidth=1, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result_cv
result <- acPCA(X=X, Y=Y, lambda=1,
kernel = "gaussian", bandwidth=2, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result <- acPCA(X=X, Y=Y, lambda=0.5,
kernel = "gaussian", bandwidth=2.5, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result <- acPCA(X=X, Y=Y, lambda=0.2,
kernel = "gaussian", bandwidth=2.5, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=mean(abs(Y)), quiet=T)
result_cv
result_cv$best_lambda
result_cv
ratio <- result_cv$ratio
dim(ratio)
perc <- 0.05
max(ratio[1,])*perc
result <- acPCA(X=X, Y=Y, lambda=0.4,
kernel = "gaussian", bandwidth=mean(abs(Y)), nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
a
acPCAtuneLambda <- function(X, Y, nPC, lambdas, centerX=T, centerY=T, scaleX=F, scaleY=F, kernel=c("linear", "gaussian"), bandwidth=NULL, anov=T, perc=0.05, quiet=F){
####check whether a whole row in X is missing
Xmis <- apply(X, 1, function(row){sum(!is.na(row))})
if (sum(Xmis==0)){
stop(paste("The following samples in X is missing, please remove them in X and Y: rows ", paste(which(Xmis==0), collapse =  " "), sep=""))
}
####check whether the number of samples in X and Y match
if (dim(X)[1]!=dim(Y)[1]){
stop("The numbers of samples in X ( nrow(X) ) and Y ( nrow(Y) ) do not match")
}
####check whether the elements in lambdas are non-negative
if (sum(lambdas<0)){
stop("All elements in lambdas should be non-negative")
}
lambdas <- sort(lambdas)
####add 0 to lambdas
if (sum(lambdas==0)==0){
lambdas <- c(0, lambdas)
}
nsam <- dim(X)[1]
p <- dim(X)[2]
####if Y is a vector, change it to a matrix
if (is.null(dim(Y))){
Y <- matrix(Y, ncol=1)
}
####missing data
X[is.na(X)] <- mean(X, na.rm=T)
Y[is.na(Y)] <- mean(Y, na.rm=T)
X <- scale(X, center = centerX, scale = scaleX)
Y <- scale(Y, center = centerY, scale = scaleY)
K <- calkernel(Y, kernel, bandwidth)
ratio <- c()
for (i in 1:length(lambdas)){
if (!quiet){
if (i==length(lambdas)){
cat("\r", round(i/length(lambdas)*100), "%", "completed\n")
} else {
cat("\r", round(i/length(lambdas)*100), "%", "completed")
}
}
lambda <- lambdas[i]
result_acpca <- eigs_sym(calAv, k = nPC, which = "LA", n = p, args = list(X = X, K = K, lambda = lambda))
v <- matrix(result_acpca$vectors, ncol = nPC)
Xv <- X%*%v
ratio <- rbind(ratio, diag(crossprod(Xv, K%*%Xv))/diag(crossprod(Xv)) )
}
if (anov){
### the analysis of variance interpretation
thres <- perc
} else {
### otherwise
thres <- max(ratio[1,])*perc
}
tmp <- which(apply(ratio <= thres, 1, sum)==ncol(ratio))
if (length(tmp)==0){
best_lambda <- NA
warning("lambda is not large enough, increase max(lambdas) or increase perc")
} else {
best_lambda <- lambdas[min(tmp)]
}
return(list(ratio = ratio, best_lambda = best_lambda, lambdas = lambdas, kernel=kernel, bandwidth=bandwidth))
}
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=mean(abs(Y)), quiet=T)
result_cv
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel = "gaussian", bandwidth=mean(abs(Y)), nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", mean(abs(Y)), sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
names(data_example3)
data_example3$lab
load("~/AC-PCA/R_package/acPCA/data/data_example4.rda")
names(data_example4)
data_example4$lab
data_example3 <- data_example4
names(data_example3)
save(data_example3, file="~/AC-PCA/R_package/acPCA/data/data_example3.rda")
names(data_example3)
data_example3$Y
1/sqrt(3)
X <- data_example3$X ### the data matrix
data_example3$lab ### the biological conditions
Y <- data_example3$Y ### the confounder matrix
dim(Y)
Y[,1:2]
Y[,1]
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example3$lab)
plot(data_example3$true_pattern[1,], data_example3$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example3$true_pattern[1,])-0.3,
max(data_example3$true_pattern[1,])+0.3) )
text(data_example3$true_pattern[1,], data_example3$true_pattern[2,],
labels = 1:10)
dim(Y)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example2$lab)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
### Gaussian kernel
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=mean(abs(Y)), quiet=T)
mean(abs(Y))
result_cv
Y
mean(abs(Y))
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=0.1, quiet=T)
result_cv
seq(0, 10, 0.05)
seq(0, 10, 0.05)
acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=1, quiet=T)
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=0.2, quiet=T)
result_cv
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian", bandwidth=2, quiet=T)
result_cv
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=T, kernel = "linear", quiet=T)
result_cv
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="linear", nPC=2)
par(mfrow=c(1,1))
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Linear kernel")
text(result$Xv[,1], result$Xv[,2], labels = data_example3$lab)
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data("data_example2")
names(data_example2)
data_example2
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
Y <- data_example1$Y ### the confounder matrix
h <- 0.5
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian",
bandwidth=h, quiet=T)
library(acPCA)
data(data_example1)
data_example1$group ### the group labels
X <- data_example1$X ### the data matrix
Y <- data_example1$Y ### the confounder matrix
h <- 0.5
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian",
bandwidth=h, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=h, nPC=2)
###the signs of the PCs are meaningless
plot(result$Xv[,1], -result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main="Gaussian kernel, h=0.5")
text(result$Xv[,1], -result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
par(mfrow=c(3,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
hs <- c(0.01, 0.1, 1, 2, 10, 20)
for (h in hs){
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 10, 0.05),
anov=F, kernel = "gaussian",
bandwidth=h, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=h, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", h, sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
}
par(mfrow=c(3,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
hs <- c(0.01, 0.1, 1, 2, 10, 20)
for (h in hs){
result_cv <- acPCAtuneLambda(X=X, Y=Y, nPC=2, lambdas=seq(0, 20, 0.05),
anov=F, kernel = "gaussian",
bandwidth=h, quiet=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda,
kernel="gaussian", bandwidth=h, nPC=2)
plot(result$Xv[,1], result$Xv[,2], xlab="PC 1", ylab="PC 2",
col="black", type="n", main=paste("Gaussian kernel, h=", h, sep="") )
text(result$Xv[,1], result$Xv[,2], labels = data_example1$lab,
col=data_example1$group+1)
}
result_cv
h =10
data(data_example2)
X <- data_example2$X ###the data matrix
Y <- data_example2$Y ###the confounder matrix
Y
pca <- prcomp(X, center=T) ###regular PCA
par(mfrow=c(2,2), pin=c(2.5,2.5), mar=c(4.1, 3.9, 3.2, 1.1))
plot(pca$x[,1], pca$x[,2], xlab="PC 1", ylab="PC 2", col="black", type="n", main="PCA")
text(pca$x[,1], pca$x[,2], labels = data_example2$lab)
plot(data_example2$true_pattern[1,], data_example2$true_pattern[2,],
xlab="Factor 1", ylab="Factor 2", col="black", type="n", main="True pattern",
xlim=c(min(data_example2$true_pattern[1,])-0.3,
max(data_example2$true_pattern[1,])+0.3) )
text(data_example2$true_pattern[1,], data_example2$true_pattern[2,],
labels = data_example2$lab)
plot(data_example2$confound_pattern[1,], data_example2$confound_pattern[2,],
xlab="", ylab="", col="black", type="n", main="Confounding pattern",
xlim=c(min(data_example2$confound_pattern[1,])-0.3,
max(data_example2$confound_pattern[1,])+0.3) )
text(data_example2$confound_pattern[1,], data_example2$confound_pattern[2,], labels =
paste(data_example2$lab, '(',data_example2$Y, ')', sep=""), cex=0.5 )
library("acPCA", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
setwd("/Users/zhixianglin/AC-PCA/R_package/acPCA/")
document()
library(devtools)
library(roxygen2)
setwd("/Users/zhixianglin/AC-PCA/R_package/acPCA/")
document()
setwd("/Users/zhixianglin/AC-PCA/R_package/")
install("acPCA")
