% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acPCAcv.R
\name{acPCAcv}
\alias{acPCAcv}
\title{Perform cross-validation to tune the lambda parameter in function acPCA}
\usage{
acPCAcv(X, Y, lambdas, centerX = T, scaleX = F, scaleY = F, nPC = 2,
  kernel = c("linear", "gaussian"), bandwidth = NULL, fold = 10,
  foldlab = NULL, perc = 0.05, plot = T, quiet = F)
}
\arguments{
\item{X}{the n by p data matrix, where n is the number of samples, p is the number of variables. Missing values in X should be labeled as NA. If a whole sample in X is missing, it should be removed.}

\item{Y}{the n by q confounder matrix, where n is the number of samples, q is the number of confounding factors. Missing values in Y should be labeled as NA.}

\item{lambdas}{a vector with the tuning parameters, non-negative values.}

\item{centerX}{center the columns in X. Default is True.}

\item{scaleX}{scale the columns in X to unit standard deviation. Default is False.}

\item{scaleY}{scale the columns in Y to unit standard deviation. Default is False.}

\item{nPC}{number of principal components to compute}

\item{kernel}{the kernel to use: "linear", "gaussian".}

\item{bandwidth}{bandwidth h for Gaussian kernel. Optional.}

\item{fold}{the fold number for cross-validation. Default is 10.}

\item{foldlab}{optional. A vector of labels for cross-validation, should take values from 1 to fold. Length of the vector should match with NROW(X).}

\item{perc}{the best lambda is defined to be the smallest lambda with loss smaller than (max(loss)-min(loss))*perc + min(loss).}

\item{plot}{True or False. plot=T generates the diagnosis plot (lambda vs. loss). Default is True.}

\item{quiet}{True or False. Output the progress of the program. Default is False.}
}
\value{
Results for cross-validation
\item{loss}{a vector with the loss. Same length as lambdas} 
\item{best_lambda}{the best lambda after cross-validation}
\item{...}{Input parameters for the function}
}
\description{
Perform cross-validation to tune the lambda parameter in function acPCA
}
\examples{
load_all()
data(data_example1)
X <- data_example1$X; Y <- data_example1$Y 

##first tune lambda, and then use the best lambda. Linear kernel
result_cv_linear <- acPCAcv(X=X, Y=Y, lambdas=seq(0, 1, 0.05), kernel="linear", nPC=2, plot=T)
result_linear <- acPCA(X=X, Y=Y, lambda=result_cv_linear$best_lambda, kernel="linear", nPC=2)

##Gaussian kernel
result_cv_gaussian <- acPCAcv(X=X, Y=Y, lambdas=seq(0, 1, 0.05), kernel="gaussian", bandwidth=1, nPC=2, plot=T)
result_gaussian <- acPCA(X=X, Y=Y, lambda=result_cv_gaussian$best_lambda, kernel="gaussian", bandwidth=1, nPC=2)
}

