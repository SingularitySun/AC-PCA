% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/acPCA.R
\name{acPCA}
\alias{acPCA}
\title{Perform AC-PCA for simultaneous dimension reduction and adjustment for confounding variation}
\usage{
acPCA(X, Y, lambda, centerX = T, scaleX = F, scaleY = F, nPC = 2,
  kernel = c("linear", "gaussian"), bandwidth = NULL)
}
\arguments{
\item{X}{the n by p data matrix, where n is the number of samples. Missing values in X should be labeled as NA. If a whole sample in X is missing, it should be removed.}

\item{Y}{the n by q confounder matrix, where n is the number of samples. Missing values in Y should be labeled as NA.}

\item{lambda}{the tuning parameter, non-negative.}

\item{centerX}{center the columns in X. Default is True.}

\item{scaleX}{scale the columns in X to unit standard deviation. Default is False.}

\item{scaleY}{scale the columns in Y to unit standard deviation. Default is False.}

\item{nPC}{number of principal components to compute}

\item{kernel}{the kernel to use: "linear", "gaussian".}

\item{bandwidth}{bandwidth h for Gaussian kernel. Optional.}
}
\value{
The principal components and the projected data
\item{v}{the principal components, p by nPC matrix} 
\item{Xv}{the projected data, i.e. X times v}
\item{...}{Input parameters for the function}
}
\description{
Perform AC-PCA for simultaneous dimension reduction and adjustment for confounding variation
}
\examples{
load_all()
data(data_example1)
X <- data_example1$X; Y <- data_example1$Y 

##use linear kernel
result_linear <- acPCA(X=X, Y=Y, lambda=0.5, kernel="linear", nPC=2) 

##use Gaussian kernel
result_gaussian <- acPCA(X=X, Y=Y, lambda=0.5, kernel="gaussian", bandwidth=1, nPC=2)

##first tune lambda, and then use the best lambda
result_cv <- acPCAcv(X=X, Y=Y, lambdas=seq(0, 1, 0.05), kernel="linear", nPC=2, plot=T)
result <- acPCA(X=X, Y=Y, lambda=result_cv$best_lambda, kernel="linear", nPC=2)
}

