function [ obj ] = acPCA( X, Y, lambda, nPC, kernel, bandwidth, opts)
%% 
% acPCA -- simultaneous dimension reduction and adjustment for confounding 
% variation.

% input 
% X: a the n by p data matrix, where n is the number of samples, p is the 
% number of variables
% Missing values in X should be labeled as NaN. If a whole sample in X is
% missing, it should be removed.
% Y: the n by q confounder matrix, where n is the number of samples, q is 
% the number of confounding factors.  
% Missing values in Y should be labeled as NaN.
% lambda: tuning parameter, non-negative
% nPC: number of principal components to compute
% kernel: the kernel to use, should be either 'linear', 'gaussian'.
% bandwidth: bandwidth for gaussian kernel. Provide any number for 'linear'
% kernel, it won't affect the result.
% opts: some other options:
% opts.centerX: center the columns in X. Default is 1(True).
% opts.scaleX: scale the columns in X to unit standard deviation. Default is 0(False).
% opts.scaleY: scale the columns in Y to unit standard deviation. Default is 0(False).

% output
% obj:
% obj.v: the principal components, p by nPC matrix
% obj.Xv	
the projected data, i.e. X times v
...	
Input parameters for the function
Xv = Xv, v = v, lambda = lambda, kernel = kernel, 
        bandwidth = bandwidth
% obj.loglik: the loglike during the iteractions
% obj.pi_vec: final Pi vector, e.g., pi_00, pi_10, pi_01, pi_11.
% obj.piMat: all the Pi vector during the iteractions
% obj.betaAlpha: final alpha parameter for the beta distr
% obj.betaAlphaMat: all alpha parameter during iteractions
% obj.Z: The posterior of the the hidden variables, e.g., Z_00, Z_10, Z_01,
% Z_11.
% obj.maxDiff: max diff of parameters change.
% obj.q1: q1 an nAnn-by-nGWAS^2  matrix
% obj.q1Mat: all q1 during iteractions.
%
%
%%


strcmp(kernel,'linear')
